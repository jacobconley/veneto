(* Interfaces *)
interface_decl = 'interface' identifier '=' interface_block;
interface_block = '{' i_body '}';

i_body = '{' [{ i_kvp ^+ ',' }]
i_kvp = identifier ['?'] ':' i_value_type
i_value_type = 'string' (* more to come *)


(* 

    ======== ======= =====
    Resource Classes (RCs) 
    ======== ======= =====
    
*)

resource_class = rc_declaration '{' rc_body '}' ;

(* 
    RCs can have generic params (general.ebnf) or flags. 
*)
rc_ident        = identifier rc_params           ;
rc_params       = [generic_params | rc_flags]    ;
rc_flags        = never; 
(* rc_flags =     '(' {identifier ^+ ',' } ')'   ;       *)
(* ðŸ‘† that's coming later! *)

(* Title line *)
(*  
    `rc_ident`:
        Must have an identifier.
        If it is not an extension, it may have generics and flags.  
        If it is an extension, it may not have generics nor flags, but the extended RC may. 

    So we could use something like this grammar
        rc_declaration  = 'resource' identifier rc_modification ;
        rc_modification = 'extends' rc_ident | rc_params; 
    to prevent it grammatically,
    but instead I'll opt to take the lazy route and just have it be a semantic error instead 
*)
rc_declaration = 'resource' rc_ident; 

(* 
    This is a type used in an RC; 
    it can be a reference to another RC or a normal data type 
*)

rc_type = rc_reference | type; 

(* 
    -- ----
    RC Body
    -- ----
*)
rc_body = [{ rc_data | rc_interface | rc_links | rc_method }] ;
(* SEMANTICS: Only one of each.  It's just like this so it can be in any order *)

(* Special grammar *)
rc_reference =  '@empty' | '@media' | '@self' | rc_ident ;
rc_data = rc_type ; 



rc_data = 'data' type ;
rc_interface = 'interface' (identifier | interface_block) ; 


rc_links = 'links' '{' links_block '}' ;
links_block = [{ link ^+ ',' }] ; 
link = identifier ['?'] '->' rc_reference ;


rc_method = method_name [method_input] ['->' method_outputs] ';' ;
method_name = 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' ;
method_input = rc_type ['%'] ;
method_status = '#' Number ;
method_outputs = method_output [{',' method_output}] ;
method_output = [method_status] [rc_type] ;
(* SEMANTICS: ðŸ‘† At least one of these two must be present 
    Otherwise, this could technically be empty.  Like, this would be technically valid.  Lol.
    GET -> ,,,,,,,,,; 
 *)


(* Entry Points *)
rc_entry_directive = 'entry' identifier StringLiteral ;